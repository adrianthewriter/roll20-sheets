.box--talents {
  flex: none !important;
  width: stretch;
}

.table--talents {
  counter-reset: talents;

  & .tablerow {
    position: relative;
    display: flex;
    flex-flow: row wrap;
    height: fit-content;
    margin: var(--gap-size) 0;
    background: white;
    border: 2px solid black !important;

    --notchSize: 9px;
    clip-path: polygon(
      0% var(--notchSize),
      var(--notchSize) 0%,
      100% 0%,
      100% 100%,
      100% calc(100% - var(--notchSize)),
      calc(100% - var(--notchSize)) 100%,
      100% 100%,
      0% 100%
    );

    &::before {
      content: '';
      position: absolute;
      top: 2px;
      left: -3px;
      border-top: 2px solid black;
      width: 10px;
      transform: rotate(135deg);
    }

    &::after {
      content: '';
      position: absolute;
      bottom: 2px;
      right: -2px;
      border-top: 2px solid black;
      width: 10px;
      transform: rotate(-45deg);
    }
  }

  & .repitem::after {
    content: '';
    position: absolute;
    top: 2px;
    left: 2px;
    z-index: -1;
    display: block;
    width: stretch;
    height: stretch;
    background: black;

    --notchSize: 9px;
    clip-path: polygon(
      0% var(--notchSize),
      var(--notchSize) 0%,
      100% 0%,
      100% 100%,
      100% calc(100% - var(--notchSize)),
      calc(100% - var(--notchSize)) 100%,
      100% 100%,
      0% 100%
    );
  }

  & .field {
    flex: none !important;
    width: stretch;
    border: none;

    & > span {
      display: flex;
      align-items: flex-start;
      justify-content: center;
      width: 30px;
      padding: 2px 0;
      margin: 0;
      border-right: 1px solid black;
    }

    & > span::before {
      counter-increment: talents;
      content: counter(talents);
      font: 16px var(--font-heading);
    }

    & > span,
    & input[type='text'],
    & textarea {
      min-height: var(--base-size);
    }

    & input[type='text'],
    & textarea {
      flex: 1 !important;
    }

    & input[type='text'],
    & textarea {
      padding: 0 var(--gap-size);
    }

    & input[type='text'] {
      white-space: nowrap;
      text-overflow: ellipsis;
    }
  }

  & .toggle {
    position: absolute;
    top: 0;
    left: 0;
    display: flex;
    width: 30px;
    height: 25px;
    padding: 0;
    opacity: 0;
  }

  & .toggle input[type='checkbox'].togglebox {
    width: 30px;
    height: 25px;
  }

  & .field:nth-child(4) span,
  & .field:nth-child(4) {
    display: none;
    margin-left: 29px;
    border-top: 1px solid black;
    border-left: 1px solid black;
  }

  & .toggle[type='hidden'][value='expand'] ~ .field:nth-child(4) {
    display: flex;
  }
}
